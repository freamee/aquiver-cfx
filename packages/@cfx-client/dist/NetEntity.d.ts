import { Quaternion, Vector3 } from 'three';
import { WorldObject } from './WorldObject';
export declare abstract class NetEntity extends WorldObject {
    abstract get scriptID(): number;
    protected abstract _stateBag: StateBagInterface;
    protected constructor();
    setStateBag<T = unknown>(key: string, value: T, replicated: boolean): void;
    getStateBag<T = unknown>(key: string): T;
    isAttached(): boolean;
    isAttachedTo(entity: NetEntity): boolean;
    detach(): void;
    setNoCollision(entity: NetEntity, toggle: boolean): void;
    hasClearLosToEntity(entity: NetEntity, traceType?: number): boolean;
    hasClearLosToEntityInFront(entity: NetEntity): boolean;
    hasBeenDamagedBy(entity: NetEntity): boolean;
    hasBeenDamagedByWeapon(weaponHash: number): boolean;
    hasBeenDamagedByAnyWeapon(): boolean;
    hasBeenDamagedByAnyMeleeWeapon(): boolean;
    clearLastWeaponDamage(): void;
    isDead(): boolean;
    isPedDeadOrDying(): boolean;
    isAlive(): boolean;
    getOffset(offset: Vector3): Vector3;
    getOffsetWithWorld(worldPosition: Vector3): Vector3;
    resetAlpha(): void;
    setOutline(r?: number, g?: number, b?: number, a?: number): void;
    clearOutline(): void;
    playSoundFromEntity(audioName: string, audioRef: string, isNetwork?: boolean): number;
    isNetOwner(playerIndex: number): boolean;
    hasBoneByName(boneName: string): boolean;
    get isNetworked(): boolean;
    get networkId(): number;
    get netOwner(): number;
    get isValid(): boolean;
    get model(): number;
    get velocity(): Vector3;
    set velocity(value: Vector3);
    get isInWater(): boolean;
    get isOnScreen(): boolean;
    get isUpright(): boolean;
    get isUpsideDown(): boolean;
    get isInAir(): boolean;
    get visible(): boolean;
    set visible(state: boolean);
    get alpha(): number;
    set alpha(alpha: number);
    get freezePosition(): boolean;
    set freezePosition(state: boolean);
    get matrix(): {
        forward: Vector3;
        right: Vector3;
        up: Vector3;
    };
    get position(): Vector3;
    set position(pos: Vector3);
    get positionNoOffset(): Vector3;
    set positionNoOffset(pos: Vector3);
    get rotation(): Vector3;
    set rotation(rotation: Vector3);
    get quaternion(): Quaternion;
    set quaternion(quaternion: Quaternion);
    get heading(): number;
    set heading(heading: number);
    set invincible(state: boolean);
    get health(): number;
    set health(amount: number);
    get maxHealth(): number;
    set maxHealth(amount: number);
    get collision(): boolean;
    set collision(state: boolean);
    toggleCollision(toggle: boolean, keepPhysics: boolean): void;
    set hasGravity(state: boolean);
}
